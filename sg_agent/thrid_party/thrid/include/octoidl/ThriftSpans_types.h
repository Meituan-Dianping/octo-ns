/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftSpans_TYPES_H
#define ThriftSpans_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





struct StatusCode {
  enum type {
    SUCCESS = 0,
    EXCEPTION = 1,
    TIMEOUT = 2,
    DROP = 3
  };
};

extern const std::map<int, const char*> _StatusCode_VALUES_TO_NAMES;


class Endpoint {
 public:

  static const char* ascii_fingerprint; // = "C7D2D58463AC91C552EE8B325EA2ACCC";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xD2,0xD5,0x84,0x63,0xAC,0x91,0xC5,0x52,0xEE,0x8B,0x32,0x5E,0xA2,0xAC,0xCC};

  Endpoint() : ip(0), port(0), appKey("") {
  }

  virtual ~Endpoint() throw() {}

  int32_t ip;
  int16_t port;
  std::string appKey;

  void __set_ip(const int32_t val) {
    ip = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_appKey(const std::string& val) {
    appKey = val;
  }

  bool operator == (const Endpoint & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(appKey == rhs.appKey))
      return false;
    return true;
  }
  bool operator != (const Endpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Endpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Annotation__isset {
  _Annotation__isset() : duration(false) {}
  bool duration;
} _Annotation__isset;

class Annotation {
 public:

  static const char* ascii_fingerprint; // = "CE5BE9A8A7BD398538F703F899B08A94";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x5B,0xE9,0xA8,0xA7,0xBD,0x39,0x85,0x38,0xF7,0x03,0xF8,0x99,0xB0,0x8A,0x94};

  Annotation() : value(""), timestamp(0), duration(0) {
  }

  virtual ~Annotation() throw() {}

  std::string value;
  int64_t timestamp;
  int32_t duration;

  _Annotation__isset __isset;

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  void __set_duration(const int32_t val) {
    duration = val;
    __isset.duration = true;
  }

  bool operator == (const Annotation & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (__isset.duration != rhs.__isset.duration)
      return false;
    else if (__isset.duration && !(duration == rhs.duration))
      return false;
    return true;
  }
  bool operator != (const Annotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Annotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVAnnotation {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  KVAnnotation() : key(""), value("") {
  }

  virtual ~KVAnnotation() throw() {}

  std::string key;
  std::string value;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const KVAnnotation & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const KVAnnotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVAnnotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSpan__isset {
  _ThriftSpan__isset() : annotations(false), type(false), packageSize(false), infraName(false), infraVersion(false), kvAnnotations(false), status(false), mask(false) {}
  bool annotations;
  bool type;
  bool packageSize;
  bool infraName;
  bool infraVersion;
  bool kvAnnotations;
  bool status;
  bool mask;
} _ThriftSpan__isset;

class ThriftSpan {
 public:

  static const char* ascii_fingerprint; // = "B08D60902E6EF2A6DF2C5746A48261F4";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x8D,0x60,0x90,0x2E,0x6E,0xF2,0xA6,0xDF,0x2C,0x57,0x46,0xA4,0x82,0x61,0xF4};

  ThriftSpan() : traceId(0), spanId(""), spanName(""), start(0), duration(0), clientSide(0), type(""), packageSize(0), infraName(""), infraVersion(""), status((StatusCode::type)0), mask(0) {
  }

  virtual ~ThriftSpan() throw() {}

  int64_t traceId;
  std::string spanId;
  std::string spanName;
  Endpoint local;
  Endpoint remote;
  int64_t start;
  int32_t duration;
  bool clientSide;
  std::vector<Annotation>  annotations;
  std::string type;
  int32_t packageSize;
  std::string infraName;
  std::string infraVersion;
  std::vector<KVAnnotation>  kvAnnotations;
  StatusCode::type status;
  int32_t mask;

  _ThriftSpan__isset __isset;

  void __set_traceId(const int64_t val) {
    traceId = val;
  }

  void __set_spanId(const std::string& val) {
    spanId = val;
  }

  void __set_spanName(const std::string& val) {
    spanName = val;
  }

  void __set_local(const Endpoint& val) {
    local = val;
  }

  void __set_remote(const Endpoint& val) {
    remote = val;
  }

  void __set_start(const int64_t val) {
    start = val;
  }

  void __set_duration(const int32_t val) {
    duration = val;
  }

  void __set_clientSide(const bool val) {
    clientSide = val;
  }

  void __set_annotations(const std::vector<Annotation> & val) {
    annotations = val;
    __isset.annotations = true;
  }

  void __set_type(const std::string& val) {
    type = val;
    __isset.type = true;
  }

  void __set_packageSize(const int32_t val) {
    packageSize = val;
    __isset.packageSize = true;
  }

  void __set_infraName(const std::string& val) {
    infraName = val;
    __isset.infraName = true;
  }

  void __set_infraVersion(const std::string& val) {
    infraVersion = val;
    __isset.infraVersion = true;
  }

  void __set_kvAnnotations(const std::vector<KVAnnotation> & val) {
    kvAnnotations = val;
    __isset.kvAnnotations = true;
  }

  void __set_status(const StatusCode::type val) {
    status = val;
    __isset.status = true;
  }

  void __set_mask(const int32_t val) {
    mask = val;
    __isset.mask = true;
  }

  bool operator == (const ThriftSpan & rhs) const
  {
    if (!(traceId == rhs.traceId))
      return false;
    if (!(spanId == rhs.spanId))
      return false;
    if (!(spanName == rhs.spanName))
      return false;
    if (!(local == rhs.local))
      return false;
    if (!(remote == rhs.remote))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(duration == rhs.duration))
      return false;
    if (!(clientSide == rhs.clientSide))
      return false;
    if (__isset.annotations != rhs.__isset.annotations)
      return false;
    else if (__isset.annotations && !(annotations == rhs.annotations))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.packageSize != rhs.__isset.packageSize)
      return false;
    else if (__isset.packageSize && !(packageSize == rhs.packageSize))
      return false;
    if (__isset.infraName != rhs.__isset.infraName)
      return false;
    else if (__isset.infraName && !(infraName == rhs.infraName))
      return false;
    if (__isset.infraVersion != rhs.__isset.infraVersion)
      return false;
    else if (__isset.infraVersion && !(infraVersion == rhs.infraVersion))
      return false;
    if (__isset.kvAnnotations != rhs.__isset.kvAnnotations)
      return false;
    else if (__isset.kvAnnotations && !(kvAnnotations == rhs.kvAnnotations))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.mask != rhs.__isset.mask)
      return false;
    else if (__isset.mask && !(mask == rhs.mask))
      return false;
    return true;
  }
  bool operator != (const ThriftSpan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSpan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSpanList__isset {
  _ThriftSpanList__isset() : var1(false), var2(false) {}
  bool var1;
  bool var2;
} _ThriftSpanList__isset;

class ThriftSpanList {
 public:

  static const char* ascii_fingerprint; // = "01BB7DF5DC125F694C08EE3ED02BB420";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0xBB,0x7D,0xF5,0xDC,0x12,0x5F,0x69,0x4C,0x08,0xEE,0x3E,0xD0,0x2B,0xB4,0x20};

  ThriftSpanList() : var1(0), var2("") {
  }

  virtual ~ThriftSpanList() throw() {}

  std::vector<ThriftSpan>  spans;
  int32_t var1;
  std::string var2;

  _ThriftSpanList__isset __isset;

  void __set_spans(const std::vector<ThriftSpan> & val) {
    spans = val;
  }

  void __set_var1(const int32_t val) {
    var1 = val;
    __isset.var1 = true;
  }

  void __set_var2(const std::string& val) {
    var2 = val;
    __isset.var2 = true;
  }

  bool operator == (const ThriftSpanList & rhs) const
  {
    if (!(spans == rhs.spans))
      return false;
    if (__isset.var1 != rhs.__isset.var1)
      return false;
    else if (__isset.var1 && !(var1 == rhs.var1))
      return false;
    if (__isset.var2 != rhs.__isset.var2)
      return false;
    else if (__isset.var2 && !(var2 == rhs.var2))
      return false;
    return true;
  }
  bool operator != (const ThriftSpanList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSpanList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
