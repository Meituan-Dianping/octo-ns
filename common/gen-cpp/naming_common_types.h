/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef naming_common_TYPES_H
#define naming_common_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace meituan_mns {

struct UptCmd {
  enum type {
    RESET = 0,
    ADD = 1,
    DELETE = 2
  };
};

extern const std::map<int, const char*> _UptCmd_VALUES_TO_NAMES;

struct fb_status {
  enum type {
    DEAD = 0,
    STARTING = 1,
    ALIVE = 2,
    STOPPING = 3,
    STOPPED = 4,
    WARNING = 5
  };
};

extern const std::map<int, const char*> _fb_status_VALUES_TO_NAMES;

struct HeartbeatSupportType {
  enum type {
    NoSupport = 0,
    P2POnly = 1,
    ScannerOnly = 2,
    BothSupport = 3
  };
};

extern const std::map<int, const char*> _HeartbeatSupportType_VALUES_TO_NAMES;

typedef struct _ServiceDetail__isset {
  _ServiceDetail__isset() : unifiedProto(false) {}
  bool unifiedProto;
} _ServiceDetail__isset;

class ServiceDetail {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  ServiceDetail() : unifiedProto(0) {
  }

  virtual ~ServiceDetail() throw() {}

  bool unifiedProto;

  _ServiceDetail__isset __isset;

  void __set_unifiedProto(const bool val) {
    unifiedProto = val;
  }

  bool operator == (const ServiceDetail & rhs) const
  {
    if (!(unifiedProto == rhs.unifiedProto))
      return false;
    return true;
  }
  bool operator != (const ServiceDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SGService__isset {
  _SGService__isset() : appkey(false), version(false), ip(false), port(false), weight(false), status(false), role(false), envir(false), lastUpdateTime(false), fweight(false), serverType(false), protocol(false), serviceInfo(false), heartbeatSupport(false), warmup(false) {}
  bool appkey;
  bool version;
  bool ip;
  bool port;
  bool weight;
  bool status;
  bool role;
  bool envir;
  bool lastUpdateTime;
  bool fweight;
  bool serverType;
  bool protocol;
  bool serviceInfo;
  bool heartbeatSupport;
  bool warmup;
} _SGService__isset;

class SGService {
 public:

  static const char* ascii_fingerprint; // = "BE473A6FD5DE924200DDD8D539C779C1";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x47,0x3A,0x6F,0xD5,0xDE,0x92,0x42,0x00,0xDD,0xD8,0xD5,0x39,0xC7,0x79,0xC1};

  SGService() : appkey(""), version(""), ip(""), port(0), weight(0), status(0), role(0), envir(0), lastUpdateTime(0), fweight(0), serverType(0), protocol(""), heartbeatSupport(0), warmup(0) {
  }

  virtual ~SGService() throw() {}

  std::string appkey;
  std::string version;
  std::string ip;
  int32_t port;
  int32_t weight;
  int32_t status;
  int32_t role;
  int32_t envir;
  int32_t lastUpdateTime;
  double fweight;
  int32_t serverType;
  std::string protocol;
  std::map<std::string, ServiceDetail>  serviceInfo;
  int8_t heartbeatSupport;
  int32_t warmup;

  _SGService__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  void __set_weight(const int32_t val) {
    weight = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_role(const int32_t val) {
    role = val;
  }

  void __set_envir(const int32_t val) {
    envir = val;
  }

  void __set_lastUpdateTime(const int32_t val) {
    lastUpdateTime = val;
  }

  void __set_fweight(const double val) {
    fweight = val;
  }

  void __set_serverType(const int32_t val) {
    serverType = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  void __set_serviceInfo(const std::map<std::string, ServiceDetail> & val) {
    serviceInfo = val;
  }

  void __set_heartbeatSupport(const int8_t val) {
    heartbeatSupport = val;
  }

  void __set_warmup(const int32_t val) {
    warmup = val;
  }

  bool operator == (const SGService & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(envir == rhs.envir))
      return false;
    if (!(lastUpdateTime == rhs.lastUpdateTime))
      return false;
    if (!(fweight == rhs.fweight))
      return false;
    if (!(serverType == rhs.serverType))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    if (!(serviceInfo == rhs.serviceInfo))
      return false;
    if (!(heartbeatSupport == rhs.heartbeatSupport))
      return false;
    if (!(warmup == rhs.warmup))
      return false;
    return true;
  }
  bool operator != (const SGService &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGService & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceNode__isset {
  _ServiceNode__isset() : serviceName(false), appkeys(false), lastUpdateTime(false) {}
  bool serviceName;
  bool appkeys;
  bool lastUpdateTime;
} _ServiceNode__isset;

class ServiceNode {
 public:

  static const char* ascii_fingerprint; // = "E6EB76A1BCBAF7124A43817D5BC322F7";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xEB,0x76,0xA1,0xBC,0xBA,0xF7,0x12,0x4A,0x43,0x81,0x7D,0x5B,0xC3,0x22,0xF7};

  ServiceNode() : serviceName(""), lastUpdateTime(0) {
  }

  virtual ~ServiceNode() throw() {}

  std::string serviceName;
  std::set<std::string>  appkeys;
  int32_t lastUpdateTime;

  _ServiceNode__isset __isset;

  void __set_serviceName(const std::string& val) {
    serviceName = val;
  }

  void __set_appkeys(const std::set<std::string> & val) {
    appkeys = val;
  }

  void __set_lastUpdateTime(const int32_t val) {
    lastUpdateTime = val;
  }

  bool operator == (const ServiceNode & rhs) const
  {
    if (!(serviceName == rhs.serviceName))
      return false;
    if (!(appkeys == rhs.appkeys))
      return false;
    if (!(lastUpdateTime == rhs.lastUpdateTime))
      return false;
    return true;
  }
  bool operator != (const ServiceNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Consumer__isset {
  _Consumer__isset() : ips(false), appkeys(false) {}
  bool ips;
  bool appkeys;
} _Consumer__isset;

class Consumer {
 public:

  static const char* ascii_fingerprint; // = "AA819045335EAFAB5C2FE456B4B9CC1C";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x81,0x90,0x45,0x33,0x5E,0xAF,0xAB,0x5C,0x2F,0xE4,0x56,0xB4,0xB9,0xCC,0x1C};

  Consumer() {
  }

  virtual ~Consumer() throw() {}

  std::vector<std::string>  ips;
  std::vector<std::string>  appkeys;

  _Consumer__isset __isset;

  void __set_ips(const std::vector<std::string> & val) {
    ips = val;
  }

  void __set_appkeys(const std::vector<std::string> & val) {
    appkeys = val;
  }

  bool operator == (const Consumer & rhs) const
  {
    if (!(ips == rhs.ips))
      return false;
    if (!(appkeys == rhs.appkeys))
      return false;
    return true;
  }
  bool operator != (const Consumer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Consumer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CRouteData__isset {
  _CRouteData__isset() : id(false), name(false), appkey(false), env(false), category(false), priority(false), status(false), consumer(false), provider(false), updateTime(false), createTime(false), reserved(false) {}
  bool id;
  bool name;
  bool appkey;
  bool env;
  bool category;
  bool priority;
  bool status;
  bool consumer;
  bool provider;
  bool updateTime;
  bool createTime;
  bool reserved;
} _CRouteData__isset;

class CRouteData {
 public:

  static const char* ascii_fingerprint; // = "BA097AEDC13A13D0EF25D33F4578FC59";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x09,0x7A,0xED,0xC1,0x3A,0x13,0xD0,0xEF,0x25,0xD3,0x3F,0x45,0x78,0xFC,0x59};

  CRouteData() : id(""), name(""), appkey(""), env(0), category(0), priority(0), status(0), updateTime(0), createTime(0), reserved("") {
  }

  virtual ~CRouteData() throw() {}

  std::string id;
  std::string name;
  std::string appkey;
  int32_t env;
  int32_t category;
  int32_t priority;
  int32_t status;
  Consumer consumer;
  std::vector<std::string>  provider;
  int32_t updateTime;
  int32_t createTime;
  std::string reserved;

  _CRouteData__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_env(const int32_t val) {
    env = val;
  }

  void __set_category(const int32_t val) {
    category = val;
  }

  void __set_priority(const int32_t val) {
    priority = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  void __set_consumer(const Consumer& val) {
    consumer = val;
  }

  void __set_provider(const std::vector<std::string> & val) {
    provider = val;
  }

  void __set_updateTime(const int32_t val) {
    updateTime = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_reserved(const std::string& val) {
    reserved = val;
  }

  bool operator == (const CRouteData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(appkey == rhs.appkey))
      return false;
    if (!(env == rhs.env))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(consumer == rhs.consumer))
      return false;
    if (!(provider == rhs.provider))
      return false;
    if (!(updateTime == rhs.updateTime))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(reserved == rhs.reserved))
      return false;
    return true;
  }
  bool operator != (const CRouteData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CRouteData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CProviderNode__isset {
  _CProviderNode__isset() : appkey(false), lastModifiedTime(false), mtime(false), cversion(false), version(false) {}
  bool appkey;
  bool lastModifiedTime;
  bool mtime;
  bool cversion;
  bool version;
} _CProviderNode__isset;

class CProviderNode {
 public:

  static const char* ascii_fingerprint; // = "9118FDD77343DD231D97C424A53D2DCF";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x18,0xFD,0xD7,0x73,0x43,0xDD,0x23,0x1D,0x97,0xC4,0x24,0xA5,0x3D,0x2D,0xCF};

  CProviderNode() : appkey(""), lastModifiedTime(0), mtime(0), cversion(0), version(0) {
  }

  virtual ~CProviderNode() throw() {}

  std::string appkey;
  int64_t lastModifiedTime;
  int64_t mtime;
  int64_t cversion;
  int64_t version;

  _CProviderNode__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_lastModifiedTime(const int64_t val) {
    lastModifiedTime = val;
  }

  void __set_mtime(const int64_t val) {
    mtime = val;
  }

  void __set_cversion(const int64_t val) {
    cversion = val;
  }

  void __set_version(const int64_t val) {
    version = val;
  }

  bool operator == (const CProviderNode & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(lastModifiedTime == rhs.lastModifiedTime))
      return false;
    if (!(mtime == rhs.mtime))
      return false;
    if (!(cversion == rhs.cversion))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const CProviderNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CProviderNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CRouteNode__isset {
  _CRouteNode__isset() : appkey(false), lastModifiedTime(false), mtime(false), cversion(false), version(false) {}
  bool appkey;
  bool lastModifiedTime;
  bool mtime;
  bool cversion;
  bool version;
} _CRouteNode__isset;

class CRouteNode {
 public:

  static const char* ascii_fingerprint; // = "9118FDD77343DD231D97C424A53D2DCF";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x18,0xFD,0xD7,0x73,0x43,0xDD,0x23,0x1D,0x97,0xC4,0x24,0xA5,0x3D,0x2D,0xCF};

  CRouteNode() : appkey(""), lastModifiedTime(0), mtime(0), cversion(0), version(0) {
  }

  virtual ~CRouteNode() throw() {}

  std::string appkey;
  int64_t lastModifiedTime;
  int64_t mtime;
  int64_t cversion;
  int64_t version;

  _CRouteNode__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
  }

  void __set_lastModifiedTime(const int64_t val) {
    lastModifiedTime = val;
  }

  void __set_mtime(const int64_t val) {
    mtime = val;
  }

  void __set_cversion(const int64_t val) {
    cversion = val;
  }

  void __set_version(const int64_t val) {
    version = val;
  }

  bool operator == (const CRouteNode & rhs) const
  {
    if (!(appkey == rhs.appkey))
      return false;
    if (!(lastModifiedTime == rhs.lastModifiedTime))
      return false;
    if (!(mtime == rhs.mtime))
      return false;
    if (!(cversion == rhs.cversion))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const CRouteNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CRouteNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProtocolRequest__isset {
  _ProtocolRequest__isset() : localAppkey(false), remoteAppkey(false), protocol(false), serviceName(false) {}
  bool localAppkey;
  bool remoteAppkey;
  bool protocol;
  bool serviceName;
} _ProtocolRequest__isset;

class ProtocolRequest {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  ProtocolRequest() : localAppkey(""), remoteAppkey(""), protocol(""), serviceName("") {
  }

  virtual ~ProtocolRequest() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;
  std::string protocol;
  std::string serviceName;

  _ProtocolRequest__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  void __set_serviceName(const std::string& val) {
    serviceName = val;
  }

  bool operator == (const ProtocolRequest & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    return true;
  }
  bool operator != (const ProtocolRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProtocolRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProtocolResponse__isset {
  _ProtocolResponse__isset() : errcode(false), servicelist(false) {}
  bool errcode;
  bool servicelist;
} _ProtocolResponse__isset;

class ProtocolResponse {
 public:

  static const char* ascii_fingerprint; // = "F56E7FEC73C75A28B4691E35627DB92D";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x6E,0x7F,0xEC,0x73,0xC7,0x5A,0x28,0xB4,0x69,0x1E,0x35,0x62,0x7D,0xB9,0x2D};

  ProtocolResponse() : errcode(0) {
  }

  virtual ~ProtocolResponse() throw() {}

  int32_t errcode;
  std::vector<SGService>  servicelist;

  _ProtocolResponse__isset __isset;

  void __set_errcode(const int32_t val) {
    errcode = val;
  }

  void __set_servicelist(const std::vector<SGService> & val) {
    servicelist = val;
  }

  bool operator == (const ProtocolResponse & rhs) const
  {
    if (!(errcode == rhs.errcode))
      return false;
    if (!(servicelist == rhs.servicelist))
      return false;
    return true;
  }
  bool operator != (const ProtocolResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProtocolResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
