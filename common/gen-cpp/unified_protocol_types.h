/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef unified_protocol_TYPES_H
#define unified_protocol_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace meituan_mns {

struct MessageType {
  enum type {
    Normal = 0,
    NormalHeartbeat = 1,
    ScannerHeartbeat = 2
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

struct CompressType {
  enum type {
    None = 0,
    Snappy = 1,
    Gzip = 2
  };
};

extern const std::map<int, const char*> _CompressType_VALUES_TO_NAMES;

struct CallType {
  enum type {
    Reply = 0,
    NoReply = 1
  };
};

extern const std::map<int, const char*> _CallType_VALUES_TO_NAMES;

struct StatusCodes {
  enum type {
    Success = 0,
    ApplicationException = 1,
    RuntimeException = 2,
    RpcException = 3,
    TransportException = 4,
    ProtocolException = 5,
    DegradeException = 6,
    SecurityException = 7,
    ServiceException = 8,
    RemoteException = 9
  };
};

extern const std::map<int, const char*> _StatusCodes_VALUES_TO_NAMES;

typedef std::map<std::string, std::string>  Context;


class RequestInfo {
 public:

  static const char* ascii_fingerprint; // = "59AD75927B39FBAC91B35C663FDB29CD";
  static const uint8_t binary_fingerprint[16]; // = {0x59,0xAD,0x75,0x92,0x7B,0x39,0xFB,0xAC,0x91,0xB3,0x5C,0x66,0x3F,0xDB,0x29,0xCD};

  RequestInfo() : serviceName(""), sequenceId(0), callType(0), timeout(0) {
  }

  virtual ~RequestInfo() throw() {}

  std::string serviceName;
  int64_t sequenceId;
  int8_t callType;
  int32_t timeout;

  void __set_serviceName(const std::string& val) {
    serviceName = val;
  }

  void __set_sequenceId(const int64_t val) {
    sequenceId = val;
  }

  void __set_callType(const int8_t val) {
    callType = val;
  }

  void __set_timeout(const int32_t val) {
    timeout = val;
  }

  bool operator == (const RequestInfo & rhs) const
  {
    if (!(serviceName == rhs.serviceName))
      return false;
    if (!(sequenceId == rhs.sequenceId))
      return false;
    if (!(callType == rhs.callType))
      return false;
    if (!(timeout == rhs.timeout))
      return false;
    return true;
  }
  bool operator != (const RequestInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ResponseInfo__isset {
  _ResponseInfo__isset() : message(false) {}
  bool message;
} _ResponseInfo__isset;

class ResponseInfo {
 public:

  static const char* ascii_fingerprint; // = "C6D3CA4A6A1EB8E865A6A00B60176AA8";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0xD3,0xCA,0x4A,0x6A,0x1E,0xB8,0xE8,0x65,0xA6,0xA0,0x0B,0x60,0x17,0x6A,0xA8};

  ResponseInfo() : sequenceId(0), status(0), message("") {
  }

  virtual ~ResponseInfo() throw() {}

  int64_t sequenceId;
  int8_t status;
  std::string message;

  _ResponseInfo__isset __isset;

  void __set_sequenceId(const int64_t val) {
    sequenceId = val;
  }

  void __set_status(const int8_t val) {
    status = val;
  }

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const ResponseInfo & rhs) const
  {
    if (!(sequenceId == rhs.sequenceId))
      return false;
    if (!(status == rhs.status))
      return false;
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ResponseInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResponseInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TraceInfo__isset {
  _TraceInfo__isset() : traceId(false), spanId(false), rootMessageId(false), currentMessageId(false), serverMessageId(false), debug(false), sample(false), clientIp(false) {}
  bool traceId;
  bool spanId;
  bool rootMessageId;
  bool currentMessageId;
  bool serverMessageId;
  bool debug;
  bool sample;
  bool clientIp;
} _TraceInfo__isset;

class TraceInfo {
 public:

  static const char* ascii_fingerprint; // = "ABB2B5AA298E9052ED1A5DE871EF9527";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0xB2,0xB5,0xAA,0x29,0x8E,0x90,0x52,0xED,0x1A,0x5D,0xE8,0x71,0xEF,0x95,0x27};

  TraceInfo() : clientAppkey(""), traceId(""), spanId(""), rootMessageId(""), currentMessageId(""), serverMessageId(""), debug(0), sample(0), clientIp("") {
  }

  virtual ~TraceInfo() throw() {}

  std::string clientAppkey;
  std::string traceId;
  std::string spanId;
  std::string rootMessageId;
  std::string currentMessageId;
  std::string serverMessageId;
  bool debug;
  bool sample;
  std::string clientIp;

  _TraceInfo__isset __isset;

  void __set_clientAppkey(const std::string& val) {
    clientAppkey = val;
  }

  void __set_traceId(const std::string& val) {
    traceId = val;
    __isset.traceId = true;
  }

  void __set_spanId(const std::string& val) {
    spanId = val;
    __isset.spanId = true;
  }

  void __set_rootMessageId(const std::string& val) {
    rootMessageId = val;
    __isset.rootMessageId = true;
  }

  void __set_currentMessageId(const std::string& val) {
    currentMessageId = val;
    __isset.currentMessageId = true;
  }

  void __set_serverMessageId(const std::string& val) {
    serverMessageId = val;
    __isset.serverMessageId = true;
  }

  void __set_debug(const bool val) {
    debug = val;
    __isset.debug = true;
  }

  void __set_sample(const bool val) {
    sample = val;
    __isset.sample = true;
  }

  void __set_clientIp(const std::string& val) {
    clientIp = val;
    __isset.clientIp = true;
  }

  bool operator == (const TraceInfo & rhs) const
  {
    if (!(clientAppkey == rhs.clientAppkey))
      return false;
    if (__isset.traceId != rhs.__isset.traceId)
      return false;
    else if (__isset.traceId && !(traceId == rhs.traceId))
      return false;
    if (__isset.spanId != rhs.__isset.spanId)
      return false;
    else if (__isset.spanId && !(spanId == rhs.spanId))
      return false;
    if (__isset.rootMessageId != rhs.__isset.rootMessageId)
      return false;
    else if (__isset.rootMessageId && !(rootMessageId == rhs.rootMessageId))
      return false;
    if (__isset.currentMessageId != rhs.__isset.currentMessageId)
      return false;
    else if (__isset.currentMessageId && !(currentMessageId == rhs.currentMessageId))
      return false;
    if (__isset.serverMessageId != rhs.__isset.serverMessageId)
      return false;
    else if (__isset.serverMessageId && !(serverMessageId == rhs.serverMessageId))
      return false;
    if (__isset.debug != rhs.__isset.debug)
      return false;
    else if (__isset.debug && !(debug == rhs.debug))
      return false;
    if (__isset.sample != rhs.__isset.sample)
      return false;
    else if (__isset.sample && !(sample == rhs.sample))
      return false;
    if (__isset.clientIp != rhs.__isset.clientIp)
      return false;
    else if (__isset.clientIp && !(clientIp == rhs.clientIp))
      return false;
    return true;
  }
  bool operator != (const TraceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TraceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LoadInfo__isset {
  _LoadInfo__isset() : averageLoad(false), oldGC(false), threadNum(false), queueSize(false), methodQpsMap(false) {}
  bool averageLoad;
  bool oldGC;
  bool threadNum;
  bool queueSize;
  bool methodQpsMap;
} _LoadInfo__isset;

class LoadInfo {
 public:

  static const char* ascii_fingerprint; // = "F424555CA1CEF935A4729C49DC664047";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x24,0x55,0x5C,0xA1,0xCE,0xF9,0x35,0xA4,0x72,0x9C,0x49,0xDC,0x66,0x40,0x47};

  LoadInfo() : averageLoad(0), oldGC(0), threadNum(0), queueSize(0) {
  }

  virtual ~LoadInfo() throw() {}

  double averageLoad;
  int32_t oldGC;
  int32_t threadNum;
  int32_t queueSize;
  std::map<std::string, double>  methodQpsMap;

  _LoadInfo__isset __isset;

  void __set_averageLoad(const double val) {
    averageLoad = val;
    __isset.averageLoad = true;
  }

  void __set_oldGC(const int32_t val) {
    oldGC = val;
    __isset.oldGC = true;
  }

  void __set_threadNum(const int32_t val) {
    threadNum = val;
    __isset.threadNum = true;
  }

  void __set_queueSize(const int32_t val) {
    queueSize = val;
    __isset.queueSize = true;
  }

  void __set_methodQpsMap(const std::map<std::string, double> & val) {
    methodQpsMap = val;
    __isset.methodQpsMap = true;
  }

  bool operator == (const LoadInfo & rhs) const
  {
    if (__isset.averageLoad != rhs.__isset.averageLoad)
      return false;
    else if (__isset.averageLoad && !(averageLoad == rhs.averageLoad))
      return false;
    if (__isset.oldGC != rhs.__isset.oldGC)
      return false;
    else if (__isset.oldGC && !(oldGC == rhs.oldGC))
      return false;
    if (__isset.threadNum != rhs.__isset.threadNum)
      return false;
    else if (__isset.threadNum && !(threadNum == rhs.threadNum))
      return false;
    if (__isset.queueSize != rhs.__isset.queueSize)
      return false;
    else if (__isset.queueSize && !(queueSize == rhs.queueSize))
      return false;
    if (__isset.methodQpsMap != rhs.__isset.methodQpsMap)
      return false;
    else if (__isset.methodQpsMap && !(methodQpsMap == rhs.methodQpsMap))
      return false;
    return true;
  }
  bool operator != (const LoadInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoadInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HeartbeatInfo__isset {
  _HeartbeatInfo__isset() : appkey(false), sendTime(false), loadInfo(false) {}
  bool appkey;
  bool sendTime;
  bool loadInfo;
} _HeartbeatInfo__isset;

class HeartbeatInfo {
 public:

  static const char* ascii_fingerprint; // = "EF43E82D9230E1225E24787F74163831";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x43,0xE8,0x2D,0x92,0x30,0xE1,0x22,0x5E,0x24,0x78,0x7F,0x74,0x16,0x38,0x31};

  HeartbeatInfo() : appkey(""), sendTime(0), status(0) {
  }

  virtual ~HeartbeatInfo() throw() {}

  std::string appkey;
  int64_t sendTime;
  LoadInfo loadInfo;
  int32_t status;

  _HeartbeatInfo__isset __isset;

  void __set_appkey(const std::string& val) {
    appkey = val;
    __isset.appkey = true;
  }

  void __set_sendTime(const int64_t val) {
    sendTime = val;
    __isset.sendTime = true;
  }

  void __set_loadInfo(const LoadInfo& val) {
    loadInfo = val;
    __isset.loadInfo = true;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  bool operator == (const HeartbeatInfo & rhs) const
  {
    if (__isset.appkey != rhs.__isset.appkey)
      return false;
    else if (__isset.appkey && !(appkey == rhs.appkey))
      return false;
    if (__isset.sendTime != rhs.__isset.sendTime)
      return false;
    else if (__isset.sendTime && !(sendTime == rhs.sendTime))
      return false;
    if (__isset.loadInfo != rhs.__isset.loadInfo)
      return false;
    else if (__isset.loadInfo && !(loadInfo == rhs.loadInfo))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const HeartbeatInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartbeatInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Header__isset {
  _Header__isset() : messageType(false), requestInfo(false), responseInfo(false), traceInfo(false), globalContext(false), localContext(false), heartbeatInfo(false) {}
  bool messageType;
  bool requestInfo;
  bool responseInfo;
  bool traceInfo;
  bool globalContext;
  bool localContext;
  bool heartbeatInfo;
} _Header__isset;

class Header {
 public:

  static const char* ascii_fingerprint; // = "449EC0AD8F982561B4D899B14FB0084B";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x9E,0xC0,0xAD,0x8F,0x98,0x25,0x61,0xB4,0xD8,0x99,0xB1,0x4F,0xB0,0x08,0x4B};

  Header() : messageType(0) {
  }

  virtual ~Header() throw() {}

  int8_t messageType;
  RequestInfo requestInfo;
  ResponseInfo responseInfo;
  TraceInfo traceInfo;
  Context globalContext;
  Context localContext;
  HeartbeatInfo heartbeatInfo;

  _Header__isset __isset;

  void __set_messageType(const int8_t val) {
    messageType = val;
    __isset.messageType = true;
  }

  void __set_requestInfo(const RequestInfo& val) {
    requestInfo = val;
    __isset.requestInfo = true;
  }

  void __set_responseInfo(const ResponseInfo& val) {
    responseInfo = val;
    __isset.responseInfo = true;
  }

  void __set_traceInfo(const TraceInfo& val) {
    traceInfo = val;
    __isset.traceInfo = true;
  }

  void __set_globalContext(const Context& val) {
    globalContext = val;
    __isset.globalContext = true;
  }

  void __set_localContext(const Context& val) {
    localContext = val;
    __isset.localContext = true;
  }

  void __set_heartbeatInfo(const HeartbeatInfo& val) {
    heartbeatInfo = val;
    __isset.heartbeatInfo = true;
  }

  bool operator == (const Header & rhs) const
  {
    if (__isset.messageType != rhs.__isset.messageType)
      return false;
    else if (__isset.messageType && !(messageType == rhs.messageType))
      return false;
    if (__isset.requestInfo != rhs.__isset.requestInfo)
      return false;
    else if (__isset.requestInfo && !(requestInfo == rhs.requestInfo))
      return false;
    if (__isset.responseInfo != rhs.__isset.responseInfo)
      return false;
    else if (__isset.responseInfo && !(responseInfo == rhs.responseInfo))
      return false;
    if (__isset.traceInfo != rhs.__isset.traceInfo)
      return false;
    else if (__isset.traceInfo && !(traceInfo == rhs.traceInfo))
      return false;
    if (__isset.globalContext != rhs.__isset.globalContext)
      return false;
    else if (__isset.globalContext && !(globalContext == rhs.globalContext))
      return false;
    if (__isset.localContext != rhs.__isset.localContext)
      return false;
    else if (__isset.localContext && !(localContext == rhs.localContext))
      return false;
    if (__isset.heartbeatInfo != rhs.__isset.heartbeatInfo)
      return false;
    else if (__isset.heartbeatInfo && !(heartbeatInfo == rhs.heartbeatInfo))
      return false;
    return true;
  }
  bool operator != (const Header &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Header & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
