/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef echo_TYPES_H
#define echo_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace echo {

struct TweetType {
  enum type {
    TWEET = 0,
    RETWEET = 2,
    DM = 10,
    REPLY = 11
  };
};

extern const std::map<int, const char*> _TweetType_VALUES_TO_NAMES;


class test {
 public:

  static const char* ascii_fingerprint; // = "BE83BDAD1197A19ED21F973CAC2DABDF";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x83,0xBD,0xAD,0x11,0x97,0xA1,0x9E,0xD2,0x1F,0x97,0x3C,0xAC,0x2D,0xAB,0xDF};

  test() : arg(""), arg2(0), arg5(0), arg7(0), arg8((TweetType::type)0) {
  }

  virtual ~test() throw() {}

  std::string arg;
  double arg2;
  std::vector<std::string>  arg3;
  std::map<std::string, std::string>  arg4;
  bool arg5;
  std::set<int64_t>  arg6;
  int32_t arg7;
  TweetType::type arg8;

  void __set_arg(const std::string& val) {
    arg = val;
  }

  void __set_arg2(const double val) {
    arg2 = val;
  }

  void __set_arg3(const std::vector<std::string> & val) {
    arg3 = val;
  }

  void __set_arg4(const std::map<std::string, std::string> & val) {
    arg4 = val;
  }

  void __set_arg5(const bool val) {
    arg5 = val;
  }

  void __set_arg6(const std::set<int64_t> & val) {
    arg6 = val;
  }

  void __set_arg7(const int32_t val) {
    arg7 = val;
  }

  void __set_arg8(const TweetType::type val) {
    arg8 = val;
  }

  bool operator == (const test & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    if (!(arg2 == rhs.arg2))
      return false;
    if (!(arg3 == rhs.arg3))
      return false;
    if (!(arg4 == rhs.arg4))
      return false;
    if (!(arg5 == rhs.arg5))
      return false;
    if (!(arg6 == rhs.arg6))
      return false;
    if (!(arg7 == rhs.arg7))
      return false;
    if (!(arg8 == rhs.arg8))
      return false;
    return true;
  }
  bool operator != (const test &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const test & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
