/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ServiceAgent_H
#define ServiceAgent_H

#include <TProcessor.h>
#include "naming_service_types.h"

namespace meituan_mns {

class ServiceAgentIf {
 public:
  virtual ~ServiceAgentIf() {}
  virtual void getServiceListByProtocol(ProtocolResponse& _return, const ProtocolRequest& req) = 0;
  virtual void getOriginServiceList(ProtocolResponse& _return, const ProtocolRequest& req) = 0;
  virtual int32_t registService(const SGService& oService) = 0;
  virtual int32_t registServicewithCmd(const int32_t uptCmd, const SGService& oService) = 0;
  virtual int32_t unRegistService(const SGService& oService) = 0;
};

class ServiceAgentIfFactory {
 public:
  typedef ServiceAgentIf Handler;

  virtual ~ServiceAgentIfFactory() {}

  virtual ServiceAgentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServiceAgentIf* /* handler */) = 0;
};

class ServiceAgentIfSingletonFactory : virtual public ServiceAgentIfFactory {
 public:
  ServiceAgentIfSingletonFactory(const boost::shared_ptr<ServiceAgentIf>& iface) : iface_(iface) {}
  virtual ~ServiceAgentIfSingletonFactory() {}

  virtual ServiceAgentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServiceAgentIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServiceAgentIf> iface_;
};

class ServiceAgentNull : virtual public ServiceAgentIf {
 public:
  virtual ~ServiceAgentNull() {}
  void getServiceListByProtocol(ProtocolResponse& /* _return */, const ProtocolRequest& /* req */) {
    return;
  }
  void getOriginServiceList(ProtocolResponse& /* _return */, const ProtocolRequest& /* req */) {
    return;
  }
  int32_t registService(const SGService& /* oService */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t registServicewithCmd(const int32_t /* uptCmd */, const SGService& /* oService */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t unRegistService(const SGService& /* oService */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ServiceAgent_getServiceListByProtocol_args__isset {
  _ServiceAgent_getServiceListByProtocol_args__isset() : req(false) {}
  bool req;
} _ServiceAgent_getServiceListByProtocol_args__isset;

class ServiceAgent_getServiceListByProtocol_args {
 public:

  ServiceAgent_getServiceListByProtocol_args() {
  }

  virtual ~ServiceAgent_getServiceListByProtocol_args() throw() {}

  ProtocolRequest req;

  _ServiceAgent_getServiceListByProtocol_args__isset __isset;

  void __set_req(const ProtocolRequest& val) {
    req = val;
  }

  bool operator == (const ServiceAgent_getServiceListByProtocol_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_getServiceListByProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_getServiceListByProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceAgent_getServiceListByProtocol_pargs {
 public:


  virtual ~ServiceAgent_getServiceListByProtocol_pargs() throw() {}

  const ProtocolRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_getServiceListByProtocol_result__isset {
  _ServiceAgent_getServiceListByProtocol_result__isset() : success(false) {}
  bool success;
} _ServiceAgent_getServiceListByProtocol_result__isset;

class ServiceAgent_getServiceListByProtocol_result {
 public:

  ServiceAgent_getServiceListByProtocol_result() {
  }

  virtual ~ServiceAgent_getServiceListByProtocol_result() throw() {}

  ProtocolResponse success;

  _ServiceAgent_getServiceListByProtocol_result__isset __isset;

  void __set_success(const ProtocolResponse& val) {
    success = val;
  }

  bool operator == (const ServiceAgent_getServiceListByProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_getServiceListByProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_getServiceListByProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_getServiceListByProtocol_presult__isset {
  _ServiceAgent_getServiceListByProtocol_presult__isset() : success(false) {}
  bool success;
} _ServiceAgent_getServiceListByProtocol_presult__isset;

class ServiceAgent_getServiceListByProtocol_presult {
 public:


  virtual ~ServiceAgent_getServiceListByProtocol_presult() throw() {}

  ProtocolResponse* success;

  _ServiceAgent_getServiceListByProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ServiceAgent_getOriginServiceList_args__isset {
  _ServiceAgent_getOriginServiceList_args__isset() : req(false) {}
  bool req;
} _ServiceAgent_getOriginServiceList_args__isset;

class ServiceAgent_getOriginServiceList_args {
 public:

  ServiceAgent_getOriginServiceList_args() {
  }

  virtual ~ServiceAgent_getOriginServiceList_args() throw() {}

  ProtocolRequest req;

  _ServiceAgent_getOriginServiceList_args__isset __isset;

  void __set_req(const ProtocolRequest& val) {
    req = val;
  }

  bool operator == (const ServiceAgent_getOriginServiceList_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_getOriginServiceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_getOriginServiceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceAgent_getOriginServiceList_pargs {
 public:


  virtual ~ServiceAgent_getOriginServiceList_pargs() throw() {}

  const ProtocolRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_getOriginServiceList_result__isset {
  _ServiceAgent_getOriginServiceList_result__isset() : success(false) {}
  bool success;
} _ServiceAgent_getOriginServiceList_result__isset;

class ServiceAgent_getOriginServiceList_result {
 public:

  ServiceAgent_getOriginServiceList_result() {
  }

  virtual ~ServiceAgent_getOriginServiceList_result() throw() {}

  ProtocolResponse success;

  _ServiceAgent_getOriginServiceList_result__isset __isset;

  void __set_success(const ProtocolResponse& val) {
    success = val;
  }

  bool operator == (const ServiceAgent_getOriginServiceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_getOriginServiceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_getOriginServiceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_getOriginServiceList_presult__isset {
  _ServiceAgent_getOriginServiceList_presult__isset() : success(false) {}
  bool success;
} _ServiceAgent_getOriginServiceList_presult__isset;

class ServiceAgent_getOriginServiceList_presult {
 public:


  virtual ~ServiceAgent_getOriginServiceList_presult() throw() {}

  ProtocolResponse* success;

  _ServiceAgent_getOriginServiceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ServiceAgent_registService_args__isset {
  _ServiceAgent_registService_args__isset() : oService(false) {}
  bool oService;
} _ServiceAgent_registService_args__isset;

class ServiceAgent_registService_args {
 public:

  ServiceAgent_registService_args() {
  }

  virtual ~ServiceAgent_registService_args() throw() {}

  SGService oService;

  _ServiceAgent_registService_args__isset __isset;

  void __set_oService(const SGService& val) {
    oService = val;
  }

  bool operator == (const ServiceAgent_registService_args & rhs) const
  {
    if (!(oService == rhs.oService))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_registService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_registService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceAgent_registService_pargs {
 public:


  virtual ~ServiceAgent_registService_pargs() throw() {}

  const SGService* oService;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_registService_result__isset {
  _ServiceAgent_registService_result__isset() : success(false) {}
  bool success;
} _ServiceAgent_registService_result__isset;

class ServiceAgent_registService_result {
 public:

  ServiceAgent_registService_result() : success(0) {
  }

  virtual ~ServiceAgent_registService_result() throw() {}

  int32_t success;

  _ServiceAgent_registService_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ServiceAgent_registService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_registService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_registService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_registService_presult__isset {
  _ServiceAgent_registService_presult__isset() : success(false) {}
  bool success;
} _ServiceAgent_registService_presult__isset;

class ServiceAgent_registService_presult {
 public:


  virtual ~ServiceAgent_registService_presult() throw() {}

  int32_t* success;

  _ServiceAgent_registService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ServiceAgent_registServicewithCmd_args__isset {
  _ServiceAgent_registServicewithCmd_args__isset() : uptCmd(false), oService(false) {}
  bool uptCmd;
  bool oService;
} _ServiceAgent_registServicewithCmd_args__isset;

class ServiceAgent_registServicewithCmd_args {
 public:

  ServiceAgent_registServicewithCmd_args() : uptCmd(0) {
  }

  virtual ~ServiceAgent_registServicewithCmd_args() throw() {}

  int32_t uptCmd;
  SGService oService;

  _ServiceAgent_registServicewithCmd_args__isset __isset;

  void __set_uptCmd(const int32_t val) {
    uptCmd = val;
  }

  void __set_oService(const SGService& val) {
    oService = val;
  }

  bool operator == (const ServiceAgent_registServicewithCmd_args & rhs) const
  {
    if (!(uptCmd == rhs.uptCmd))
      return false;
    if (!(oService == rhs.oService))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_registServicewithCmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_registServicewithCmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceAgent_registServicewithCmd_pargs {
 public:


  virtual ~ServiceAgent_registServicewithCmd_pargs() throw() {}

  const int32_t* uptCmd;
  const SGService* oService;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_registServicewithCmd_result__isset {
  _ServiceAgent_registServicewithCmd_result__isset() : success(false) {}
  bool success;
} _ServiceAgent_registServicewithCmd_result__isset;

class ServiceAgent_registServicewithCmd_result {
 public:

  ServiceAgent_registServicewithCmd_result() : success(0) {
  }

  virtual ~ServiceAgent_registServicewithCmd_result() throw() {}

  int32_t success;

  _ServiceAgent_registServicewithCmd_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ServiceAgent_registServicewithCmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_registServicewithCmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_registServicewithCmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_registServicewithCmd_presult__isset {
  _ServiceAgent_registServicewithCmd_presult__isset() : success(false) {}
  bool success;
} _ServiceAgent_registServicewithCmd_presult__isset;

class ServiceAgent_registServicewithCmd_presult {
 public:


  virtual ~ServiceAgent_registServicewithCmd_presult() throw() {}

  int32_t* success;

  _ServiceAgent_registServicewithCmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ServiceAgent_unRegistService_args__isset {
  _ServiceAgent_unRegistService_args__isset() : oService(false) {}
  bool oService;
} _ServiceAgent_unRegistService_args__isset;

class ServiceAgent_unRegistService_args {
 public:

  ServiceAgent_unRegistService_args() {
  }

  virtual ~ServiceAgent_unRegistService_args() throw() {}

  SGService oService;

  _ServiceAgent_unRegistService_args__isset __isset;

  void __set_oService(const SGService& val) {
    oService = val;
  }

  bool operator == (const ServiceAgent_unRegistService_args & rhs) const
  {
    if (!(oService == rhs.oService))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_unRegistService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_unRegistService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceAgent_unRegistService_pargs {
 public:


  virtual ~ServiceAgent_unRegistService_pargs() throw() {}

  const SGService* oService;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_unRegistService_result__isset {
  _ServiceAgent_unRegistService_result__isset() : success(false) {}
  bool success;
} _ServiceAgent_unRegistService_result__isset;

class ServiceAgent_unRegistService_result {
 public:

  ServiceAgent_unRegistService_result() : success(0) {
  }

  virtual ~ServiceAgent_unRegistService_result() throw() {}

  int32_t success;

  _ServiceAgent_unRegistService_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ServiceAgent_unRegistService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServiceAgent_unRegistService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAgent_unRegistService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceAgent_unRegistService_presult__isset {
  _ServiceAgent_unRegistService_presult__isset() : success(false) {}
  bool success;
} _ServiceAgent_unRegistService_presult__isset;

class ServiceAgent_unRegistService_presult {
 public:


  virtual ~ServiceAgent_unRegistService_presult() throw() {}

  int32_t* success;

  _ServiceAgent_unRegistService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServiceAgentClient : virtual public ServiceAgentIf {
 public:
  ServiceAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ServiceAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getServiceListByProtocol(ProtocolResponse& _return, const ProtocolRequest& req);
  void send_getServiceListByProtocol(const ProtocolRequest& req);
  void recv_getServiceListByProtocol(ProtocolResponse& _return);
  void getOriginServiceList(ProtocolResponse& _return, const ProtocolRequest& req);
  void send_getOriginServiceList(const ProtocolRequest& req);
  void recv_getOriginServiceList(ProtocolResponse& _return);
  int32_t registService(const SGService& oService);
  void send_registService(const SGService& oService);
  int32_t recv_registService();
  int32_t registServicewithCmd(const int32_t uptCmd, const SGService& oService);
  void send_registServicewithCmd(const int32_t uptCmd, const SGService& oService);
  int32_t recv_registServicewithCmd();
  int32_t unRegistService(const SGService& oService);
  void send_unRegistService(const SGService& oService);
  int32_t recv_unRegistService();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServiceAgentProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ServiceAgentIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ServiceAgentProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getServiceListByProtocol(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOriginServiceList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registService(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registServicewithCmd(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unRegistService(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServiceAgentProcessor(boost::shared_ptr<ServiceAgentIf> iface) :
    iface_(iface) {
    processMap_["getServiceListByProtocol"] = &ServiceAgentProcessor::process_getServiceListByProtocol;
    processMap_["getOriginServiceList"] = &ServiceAgentProcessor::process_getOriginServiceList;
    processMap_["registService"] = &ServiceAgentProcessor::process_registService;
    processMap_["registServicewithCmd"] = &ServiceAgentProcessor::process_registServicewithCmd;
    processMap_["unRegistService"] = &ServiceAgentProcessor::process_unRegistService;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ServiceAgentProcessor() {}
};

class ServiceAgentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServiceAgentProcessorFactory(const ::boost::shared_ptr< ServiceAgentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServiceAgentIfFactory > handlerFactory_;
};

class ServiceAgentMultiface : virtual public ServiceAgentIf {
 public:
  ServiceAgentMultiface(std::vector<boost::shared_ptr<ServiceAgentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServiceAgentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServiceAgentIf> > ifaces_;
  ServiceAgentMultiface() {}
  void add(boost::shared_ptr<ServiceAgentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getServiceListByProtocol(ProtocolResponse& _return, const ProtocolRequest& req) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getServiceListByProtocol(_return, req);
        return;
      } else {
        ifaces_[i]->getServiceListByProtocol(_return, req);
      }
    }
  }

  void getOriginServiceList(ProtocolResponse& _return, const ProtocolRequest& req) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getOriginServiceList(_return, req);
        return;
      } else {
        ifaces_[i]->getOriginServiceList(_return, req);
      }
    }
  }

  int32_t registService(const SGService& oService) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->registService(oService);
      } else {
        ifaces_[i]->registService(oService);
      }
    }
  }

  int32_t registServicewithCmd(const int32_t uptCmd, const SGService& oService) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->registServicewithCmd(uptCmd, oService);
      } else {
        ifaces_[i]->registServicewithCmd(uptCmd, oService);
      }
    }
  }

  int32_t unRegistService(const SGService& oService) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->unRegistService(oService);
      } else {
        ifaces_[i]->unRegistService(oService);
      }
    }
  }

};

} // namespace

#endif
