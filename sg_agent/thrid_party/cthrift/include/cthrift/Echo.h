/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Echo_H
#define Echo_H

#include <transport/TBufferTransports.h>
#include <tr1/functional>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <TProcessor.h>
#include <async/TAsyncProcessor.h>
#include "echo_types.h"

namespace echo {

class EchoIf {
 public:
  virtual ~EchoIf() {}
  virtual void echo(std::string& _return, const std::string& arg, const test& arg2) = 0;
};

class EchoIfFactory {
 public:
  typedef EchoIf Handler;

  virtual ~EchoIfFactory() {}

  virtual EchoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EchoIf* /* handler */) = 0;
};

class EchoIfSingletonFactory : virtual public EchoIfFactory {
 public:
  EchoIfSingletonFactory(const boost::shared_ptr<EchoIf>& iface) : iface_(iface) {}
  virtual ~EchoIfSingletonFactory() {}

  virtual EchoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EchoIf* /* handler */) {}

 protected:
  boost::shared_ptr<EchoIf> iface_;
};

class EchoNull : virtual public EchoIf {
 public:
  virtual ~EchoNull() {}
  void echo(std::string& /* _return */, const std::string& /* arg */, const test& /* arg2 */) {
    return;
  }
};

typedef struct _Echo_echo_args__isset {
  _Echo_echo_args__isset() : arg(false), arg2(false) {}
  bool arg;
  bool arg2;
} _Echo_echo_args__isset;

class Echo_echo_args {
 public:

  Echo_echo_args() : arg("") {
  }

  virtual ~Echo_echo_args() throw() {}

  std::string arg;
  test arg2;

  _Echo_echo_args__isset __isset;

  void __set_arg(const std::string& val) {
    arg = val;
  }

  void __set_arg2(const test& val) {
    arg2 = val;
  }

  bool operator == (const Echo_echo_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    if (!(arg2 == rhs.arg2))
      return false;
    return true;
  }
  bool operator != (const Echo_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Echo_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Echo_echo_pargs {
 public:


  virtual ~Echo_echo_pargs() throw() {}

  const std::string* arg;
  const test* arg2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Echo_echo_result__isset {
  _Echo_echo_result__isset() : success(false) {}
  bool success;
} _Echo_echo_result__isset;

class Echo_echo_result {
 public:

  Echo_echo_result() : success("") {
  }

  virtual ~Echo_echo_result() throw() {}

  std::string success;

  _Echo_echo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Echo_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Echo_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Echo_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Echo_echo_presult__isset {
  _Echo_echo_presult__isset() : success(false) {}
  bool success;
} _Echo_echo_presult__isset;

class Echo_echo_presult {
 public:


  virtual ~Echo_echo_presult() throw() {}

  std::string* success;

  _Echo_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class EchoClient : virtual public EchoIf {
 public:
  EchoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  EchoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& arg, const test& arg2);
  void send_echo(const std::string& arg, const test& arg2);
  void recv_echo(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EchoProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<EchoIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (EchoProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_echo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EchoProcessor(boost::shared_ptr<EchoIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &EchoProcessor::process_echo;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~EchoProcessor() {}
};

class EchoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EchoProcessorFactory(const ::boost::shared_ptr< EchoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EchoIfFactory > handlerFactory_;
};

class EchoMultiface : virtual public EchoIf {
 public:
  EchoMultiface(std::vector<boost::shared_ptr<EchoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EchoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EchoIf> > ifaces_;
  EchoMultiface() {}
  void add(boost::shared_ptr<EchoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(std::string& _return, const std::string& arg, const test& arg2) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->echo(_return, arg, arg2);
        return;
      } else {
        ifaces_[i]->echo(_return, arg, arg2);
      }
    }
  }

};

class EchoCobClient;

class EchoCobClIf {
 public:
  virtual ~EchoCobClIf() {}
  virtual void echo(std::tr1::function<void(EchoCobClient* client)> cob, const std::string& arg, const test& arg2) = 0;
};

class EchoCobSvIf {
 public:
  virtual ~EchoCobSvIf() {}
  virtual void echo(std::tr1::function<void(std::string const& _return)> cob, const std::string& arg, const test& arg2) = 0;
};

class EchoCobSvIfFactory {
 public:
  typedef EchoCobSvIf Handler;

  virtual ~EchoCobSvIfFactory() {}

  virtual EchoCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EchoCobSvIf* /* handler */) = 0;
};

class EchoCobSvIfSingletonFactory : virtual public EchoCobSvIfFactory {
 public:
  EchoCobSvIfSingletonFactory(const boost::shared_ptr<EchoCobSvIf>& iface) : iface_(iface) {}
  virtual ~EchoCobSvIfSingletonFactory() {}

  virtual EchoCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EchoCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<EchoCobSvIf> iface_;
};

class EchoCobSvNull : virtual public EchoCobSvIf {
 public:
  virtual ~EchoCobSvNull() {}
  void echo(std::tr1::function<void(std::string const& _return)> cob, const std::string& /* arg */, const test& /* arg2 */) {
    std::string _return = "";
    return cob(_return);
  }
};

class EchoCobClient : virtual public EchoCobClIf {
 public:
  EchoCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void echo(std::tr1::function<void(EchoCobClient* client)> cob, const std::string& arg, const test& arg2);
  void send_echo(const std::string& arg, const test& arg2);
  void recv_echo(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EchoAsyncProcessor : public ::apache::thrift::TAsyncProcessor {
 protected:
  boost::shared_ptr<EchoCobSvIf> iface_;
  virtual void process_fn(std::tr1::function<void(bool ok)> cob, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (EchoAsyncProcessor::*)(std::tr1::function<void(bool ok)>, int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_echo(std::tr1::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void return_echo(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_echo(std::tr1::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, void* ctx, apache::thrift::TDelayedException* _throw);
 public:
  EchoAsyncProcessor(boost::shared_ptr<EchoCobSvIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &EchoAsyncProcessor::process_echo;
  }

  virtual void process(std::tr1::function<void(bool ok)> cob, boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~EchoAsyncProcessor() {}
};

class EchoAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  EchoAsyncProcessorFactory(const ::boost::shared_ptr< EchoCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EchoCobSvIfFactory > handlerFactory_;
};

} // namespace

#endif
