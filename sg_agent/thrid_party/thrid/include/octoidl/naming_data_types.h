/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef naming_data_TYPES_H
#define naming_data_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "naming_common_types.h"


namespace meituan_mns {

struct RegistCmd {
  enum type {
    REGIST = 0,
    UNREGIST = 1
  };
};

extern const std::map<int, const char*> _RegistCmd_VALUES_TO_NAMES;

typedef class  ::meituan_mns::SGService SGService;

typedef class  ::meituan_mns::CRouteData CRouteData;

typedef struct _getservice_req_param_t__isset {
  _getservice_req_param_t__isset() : localAppkey(false), remoteAppkey(false), version(false), protocol(false) {}
  bool localAppkey;
  bool remoteAppkey;
  bool version;
  bool protocol;
} _getservice_req_param_t__isset;

class getservice_req_param_t {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  getservice_req_param_t() : localAppkey(""), remoteAppkey(""), version(""), protocol("") {
  }

  virtual ~getservice_req_param_t() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;
  std::string version;
  std::string protocol;

  _getservice_req_param_t__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  bool operator == (const getservice_req_param_t & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    return true;
  }
  bool operator != (const getservice_req_param_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getservice_req_param_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _getservice_res_param_t__isset {
  _getservice_res_param_t__isset() : localAppkey(false), remoteAppkey(false), version(false), serviceList(false), protocol(false) {}
  bool localAppkey;
  bool remoteAppkey;
  bool version;
  bool serviceList;
  bool protocol;
} _getservice_res_param_t__isset;

class getservice_res_param_t {
 public:

  static const char* ascii_fingerprint; // = "BEE4DB4CE7FE0806BC8C2B45BA6E4742";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xE4,0xDB,0x4C,0xE7,0xFE,0x08,0x06,0xBC,0x8C,0x2B,0x45,0xBA,0x6E,0x47,0x42};

  getservice_res_param_t() : localAppkey(""), remoteAppkey(""), version(""), protocol("") {
  }

  virtual ~getservice_res_param_t() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;
  std::string version;
  std::vector<SGService>  serviceList;
  std::string protocol;

  _getservice_res_param_t__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_serviceList(const std::vector<SGService> & val) {
    serviceList = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  bool operator == (const getservice_res_param_t & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(serviceList == rhs.serviceList))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    return true;
  }
  bool operator != (const getservice_res_param_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getservice_res_param_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _getservicename_req_param_t__isset {
  _getservicename_req_param_t__isset() : localAppkey(false), servicename(false), version(false), protocol(false) {}
  bool localAppkey;
  bool servicename;
  bool version;
  bool protocol;
} _getservicename_req_param_t__isset;

class getservicename_req_param_t {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  getservicename_req_param_t() : localAppkey(""), servicename(""), version(""), protocol("") {
  }

  virtual ~getservicename_req_param_t() throw() {}

  std::string localAppkey;
  std::string servicename;
  std::string version;
  std::string protocol;

  _getservicename_req_param_t__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_servicename(const std::string& val) {
    servicename = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  bool operator == (const getservicename_req_param_t & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(servicename == rhs.servicename))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    return true;
  }
  bool operator != (const getservicename_req_param_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getservicename_req_param_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _getservicename_res_param_t__isset {
  _getservicename_res_param_t__isset() : localAppkey(false), servicename(false), version(false), appkeys(false), protocol(false) {}
  bool localAppkey;
  bool servicename;
  bool version;
  bool appkeys;
  bool protocol;
} _getservicename_res_param_t__isset;

class getservicename_res_param_t {
 public:

  static const char* ascii_fingerprint; // = "029F9D059094419E5A20EF21917997A5";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x9F,0x9D,0x05,0x90,0x94,0x41,0x9E,0x5A,0x20,0xEF,0x21,0x91,0x79,0x97,0xA5};

  getservicename_res_param_t() : localAppkey(""), servicename(""), version(""), protocol("") {
  }

  virtual ~getservicename_res_param_t() throw() {}

  std::string localAppkey;
  std::string servicename;
  std::string version;
  std::set<std::string>  appkeys;
  std::string protocol;

  _getservicename_res_param_t__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_servicename(const std::string& val) {
    servicename = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_appkeys(const std::set<std::string> & val) {
    appkeys = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  bool operator == (const getservicename_res_param_t & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(servicename == rhs.servicename))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(appkeys == rhs.appkeys))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    return true;
  }
  bool operator != (const getservicename_res_param_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getservicename_res_param_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _getroute_req_param_t__isset {
  _getroute_req_param_t__isset() : localAppkey(false), remoteAppkey(false), version(false), protocol(false) {}
  bool localAppkey;
  bool remoteAppkey;
  bool version;
  bool protocol;
} _getroute_req_param_t__isset;

class getroute_req_param_t {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  getroute_req_param_t() : localAppkey(""), remoteAppkey(""), version(""), protocol("") {
  }

  virtual ~getroute_req_param_t() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;
  std::string version;
  std::string protocol;

  _getroute_req_param_t__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  bool operator == (const getroute_req_param_t & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    return true;
  }
  bool operator != (const getroute_req_param_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getroute_req_param_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _getroute_res_param_t__isset {
  _getroute_res_param_t__isset() : localAppkey(false), remoteAppkey(false), version(false), routeList(false), protocol(false) {}
  bool localAppkey;
  bool remoteAppkey;
  bool version;
  bool routeList;
  bool protocol;
} _getroute_res_param_t__isset;

class getroute_res_param_t {
 public:

  static const char* ascii_fingerprint; // = "61123EDDD00927E85F89381EEBDBC37F";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x12,0x3E,0xDD,0xD0,0x09,0x27,0xE8,0x5F,0x89,0x38,0x1E,0xEB,0xDB,0xC3,0x7F};

  getroute_res_param_t() : localAppkey(""), remoteAppkey(""), version(""), protocol("") {
  }

  virtual ~getroute_res_param_t() throw() {}

  std::string localAppkey;
  std::string remoteAppkey;
  std::string version;
  std::vector<CRouteData>  routeList;
  std::string protocol;

  _getroute_res_param_t__isset __isset;

  void __set_localAppkey(const std::string& val) {
    localAppkey = val;
  }

  void __set_remoteAppkey(const std::string& val) {
    remoteAppkey = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_routeList(const std::vector<CRouteData> & val) {
    routeList = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  bool operator == (const getroute_res_param_t & rhs) const
  {
    if (!(localAppkey == rhs.localAppkey))
      return false;
    if (!(remoteAppkey == rhs.remoteAppkey))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(routeList == rhs.routeList))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    return true;
  }
  bool operator != (const getroute_res_param_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getroute_res_param_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _regist_req_param_t__isset {
  _regist_req_param_t__isset() : retry_times(false), sgservice(false), uptCmd(false), regCmd(false) {}
  bool retry_times;
  bool sgservice;
  bool uptCmd;
  bool regCmd;
} _regist_req_param_t__isset;

class regist_req_param_t {
 public:

  static const char* ascii_fingerprint; // = "0E9168D7B65EE33C82EF267B678FCB69";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x91,0x68,0xD7,0xB6,0x5E,0xE3,0x3C,0x82,0xEF,0x26,0x7B,0x67,0x8F,0xCB,0x69};

  regist_req_param_t() : retry_times(0), uptCmd(0), regCmd((RegistCmd::type)0) {
  }

  virtual ~regist_req_param_t() throw() {}

  int32_t retry_times;
  SGService sgservice;
  int32_t uptCmd;
  RegistCmd::type regCmd;

  _regist_req_param_t__isset __isset;

  void __set_retry_times(const int32_t val) {
    retry_times = val;
  }

  void __set_sgservice(const SGService& val) {
    sgservice = val;
  }

  void __set_uptCmd(const int32_t val) {
    uptCmd = val;
  }

  void __set_regCmd(const RegistCmd::type val) {
    regCmd = val;
  }

  bool operator == (const regist_req_param_t & rhs) const
  {
    if (!(retry_times == rhs.retry_times))
      return false;
    if (!(sgservice == rhs.sgservice))
      return false;
    if (!(uptCmd == rhs.uptCmd))
      return false;
    if (!(regCmd == rhs.regCmd))
      return false;
    return true;
  }
  bool operator != (const regist_req_param_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const regist_req_param_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
